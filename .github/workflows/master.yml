# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Master branch CI/CD workflow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout project code from the GitHub repo.
      - name: Checkout project...
        uses: actions/checkout@v2
      # Setup the JDK 8 Environemnt in the VM.
      - name: Set up JDK 1.8...
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Cache maven .m2 (for future builds, it automatically invalidate cache with a .pom hash)
      - name: Cache Maven .m2 packages...
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Build and test the project..
      # TODO: Pass this test phase for a Docker image to do it.
      - name: Building and testing...
        run: mvn -B package -D build.number=$GITHUB_RUN_NUMBER -D skipTests

      # Build Docker Images for different architectures https://community.arm.com/developer/tools-software/tools/b/tools-software-ides-blog/posts/getting-started-with-docker-for-arm-on-linux  
      # Used in order for us to be able to build linux/arm/v7 images.
      - name: Set up Docker Buildx...
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      # Login in the a Docker registry to push the image. For now using the DockerHub, while K3S can't pull from GitHub packages, due to containerd problem.
      - name: Login to Container Images Registry...
        run: echo "${{ secrets.DOCKER_HUB_REGISTRY_PASSWORD }}" | docker login docker.io -u "${{ secrets.DOCKER_HUB_REGISTRY_USERNAME }}" --password-stdin
      # Build docker images using maven docker plugin. 
      - name: Building Docker Images...
        run: mvn -B docker:build
      # Push the previous images into the Docker registry.  
      - name: Publish Docker Images...
        run: mvn -B docker:push

      # Install the SSH KEY on the VM ssh agent. 
      # SSH key should have .pem format https://therandombits.com/2016/01/create-pem-file-for-your-linux-server/.
      # Known hosts was obtained using ssh-keyscan tool over the SSH server.
      - name: Install cluster ssh key...
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_TUNNEL_USER_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      # Open a tunnel in background (-f) and and binds a reroutes (-L) a local port to inside cluster K3S API port.
      - name: Open tunnel to K3S cluster...
        run: ssh -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_CONNECTION }}" -f -N -L 25000:pi1:6443
      # Official Azure Action: Sets the 'kubectl' context for subsequente Kubernetes API interactions.
      # The secret is the content of the file kubeconfig-internet.yaml, which is prepared to talk with kubernetes via a tunnel.
      - name: Set Kubernets context...
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: "${{ secrets.K3S_KUBECONFIG }}"
        id: setcontext
      # Official Azure Action: Deploys a kubernetes manifest file via a kubectl submission.
      # Important to pass the namespace for the target deployment.
      - name: Kubernetes deploy...
        uses: azure/k8s-deploy@v1
        with:
          namespace: "vehicle-manager"
          manifests: |
              ./kubernetes/vehicle-mngr-deploy.yaml
          kubectl-version: 'latest'